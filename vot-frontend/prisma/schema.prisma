generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model GAItem {
  id         String   @id @default(uuid())
  name       String
  value      String?
  giveaway   Giveaway @relation(fields: [giveawayId], references: [id])
  giveawayId String
}

model Giveaway {
  id          String   @id @default(uuid())
  name        String
  description String
  createdAt   DateTime @default(now())
  end         DateTime
  winners     String[]
  winnerCount Int
  items       GAItem[]
  guild       Guild    @relation(fields: [guildId], references: [id])
  guildId     String
}

model User {
  id        String     @id @default(uuid())
  name      String?    @unique
  email     String?    @unique
  token     String     @unique @default(cuid())
  avatar    String
  playlists Playlist[]
  commands  Command[]
  tickets   Ticket[]
  guilds    Guild[]
  spotify   Spotify?
  discord   Discord?
}

model Discord {
  id           String   @id @default(uuid())
  token        String
  refreshToken String
  expiresAt    DateTime
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @unique
  createdAt    DateTime @default(now())
}

model Spotify {
  id           String    @id @default(uuid())
  token        String?
  refreshToken String?
  expiresAt    DateTime?
  user         User      @relation(fields: [userId], references: [id])
  userId       String    @unique
}

model Playlist {
  id      String  @id @default(uuid())
  name    String
  tracks  Track[]
  user    User?   @relation(fields: [userId], references: [id])
  guild   Guild?  @relation(fields: [guildId], references: [id])
  guildId String?
  userId  String?

  @@unique([name, guildId])
}

model Track {
  id        Int        @id @default(autoincrement())
  title     String
  uri       String     @unique
  playlists Playlist[]
}

model Command {
  id          String   @id @default(uuid())
  commandId   String
  commandInfo Json
  User        User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
}

model Guild {
  id              String           @id @unique @default(uuid())
  name            String
  prefix          String           @default(";")
  icon            String?
  playlists       Playlist[]
  admins          User[]
  tickets         Ticket[]
  giveaways       Giveaway[]
  loggingChannel  String?
  TicketSettings  TicketSettings?
  WelcomeSettings WelcomeSettings?
}

model Ticket {
  id           Int      @id @default(autoincrement())
  channelId    String
  transcriptId String?
  open         Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  Guild        Guild    @relation(fields: [guildId], references: [id])
  guildId      String
}

model TicketSettings {
  id         String   @id @default(uuid())
  categoryId String?
  roleId     String?
  messageId  String?
  channelId  String?
  embedTitle String?
  embedDesc  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  guild      Guild    @relation(fields: [guildId], references: [id])
  guildId    String   @unique
}

model WelcomeSettings {
  id         String   @id @default(uuid())
  channelId  String?
  message    String?
  embedDesc  String?
  embedTitle String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  guild      Guild    @relation(fields: [guildId], references: [id])
  guildId    String   @unique
}
