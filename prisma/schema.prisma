generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Giveaway {
  id          String   @id @default(uuid())
  title       String
  description String?
  hoster      User     @relation(fields: [hosterId], references: [id], "giveawayHoster")
  createdAt   DateTime @default(now())
  end         DateTime
  winners     User[]   @relation("giveawayWinners")
  entrants    User[]   @relation("giveawayEntrants")
  channelId   String
  messageId   String?
  winnerCount Int
  guild       Guild    @relation(fields: [guildId], references: [id])
  guildId     String
  hosterId    String
  ended       Boolean  @default(false)
}

model User {
  id               String         @id @default(uuid())
  name             String?        @unique
  token            String         @unique @default(cuid())
  tier             UserTier       @default(Normal)
  banned           Boolean        @default(false)
  avatar           String?
  playlists        Playlist[]
  commands         Command[]
  guilds           Guild[]
  spotify          Spotify?
  discord          Discord?
  giveawaysHosted  Giveaway[]     @relation("giveawayHoster")
  enteredGiveaways Giveaway[]     @relation("giveawayEntrants")
  giveawaysWon     Giveaway[]     @relation("giveawayWinners")
  guildMembers     Member[]
  ticketsOwned     Ticket[]
  musicSettings    MusicSettings?
  lastUpdated      DateTime       @default(now()) @updatedAt
}

model Member {
  id                    String    @id @default(uuid())
  user                  User      @relation(fields: [userId], references: [id])
  userId                String
  guild                 Guild     @relation(fields: [guildId], references: [id])
  guildId               String
  exp                   Int       @default(0)
  level                 Int       @default(0)
  messagesToday         Int       @default(0)
  lastMessage           DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  ticketsParticipatedIn Ticket[]

  @@unique([userId, guildId])
}

model Discord {
  id           String   @id @default(uuid())
  token        String
  refreshToken String
  expiresAt    DateTime
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @unique
  createdAt    DateTime @default(now())
}

model Spotify {
  id           String    @id @default(uuid())
  token        String?
  refreshToken String?
  expiresAt    DateTime?
  user         User      @relation(fields: [userId], references: [id])
  userId       String    @unique
}

model Playlist {
  id      String  @id @default(uuid())
  name    String
  tracks  Track[]
  user    User?   @relation(fields: [userId], references: [id])
  guild   Guild?  @relation(fields: [guildId], references: [id])
  guildId String?
  userId  String?

  @@unique([name, guildId])
}

model Track {
  id        Int        @id @default(autoincrement())
  title     String
  uri       String     @unique
  playlists Playlist[]
}

model Command {
  id          String   @id @default(uuid())
  commandId   String
  commandInfo Json
  User        User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
  errors      Error[]
}

model Guild {
  id              String           @id @unique @default(uuid())
  name            String
  prefix          String           @default(";")
  icon            String?
  playlists       Playlist[]
  admins          User[]
  tickets         Ticket[]
  giveaways       Giveaway[]
  loggingChannel  String?
  TicketSettings  TicketSettings?
  WelcomeSettings WelcomeSettings?
  members         Member[]
}

model Ticket {
  id           String   @id @default(uuid())
  channelId    String
  transcriptId String?
  reason       String?  @default("No reason specified")
  open         Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  Guild        Guild    @relation(fields: [guildId], references: [id])
  guildId      String
  ownedBy      User     @relation(fields: [ownerId], references: [id])
  ownerId      String
  members      Member[]
}

model TicketSettings {
  id         String   @id @default(uuid())
  categoryId String?
  roleId     String?
  messageId  String?
  channelId  String?
  embedTitle String?
  embedDesc  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  guild      Guild    @relation(fields: [guildId], references: [id])
  guildId    String   @unique
}

model WelcomeSettings {
  id         String   @id @default(uuid())
  channelId  String?
  message    String?
  embedDesc  String?
  embedTitle String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  guild      Guild    @relation(fields: [guildId], references: [id])
  guildId    String   @unique
}

model MusicSettings {
  id        String    @id @default(uuid())
  panelType PanelType @default(Embed)
  User      User      @relation(fields: [userId], references: [id])
  userId    String    @unique
}

model Error {
  id        String   @id @default(uuid())
  channelId String?
  guildId   String?
  message   String?
  command   Command? @relation(fields: [commandId], references: [id])
  fullJson  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  commandId String?
}

enum PanelType {
  Embed
  Image
}

enum UserTier {
  Normal
  Premium
  Beta
}
