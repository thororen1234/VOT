generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Giveaway {
  id          String   @id @default(uuid())
  title       String
  description String?
  hoster      User     @relation(fields: [hosterId], references: [id], "giveawayHoster")
  createdAt   DateTime @default(now())
  end         DateTime
  winners     User[]   @relation("giveawayWinners")
  entrants    User[]   @relation("giveawayEntrants")
  channelId   String
  messageId   String?
  winnerCount Int
  guild       Guild    @relation(fields: [guildId], references: [id])
  guildId     String
  hosterId    String
  ended       Boolean  @default(false)
}

model User {
  id               String         @id @default(uuid())
  name             String?        @unique
  prefix           String?
  token            String         @unique @default(cuid())
  tier             UserTier       @default(Normal)
  banned           Boolean        @default(false)
  avatar           String?
  playlists        Playlist[]
  commands         Command[]
  guilds           Guild[]
  spotify          Spotify?
  discord          Discord?
  economy          Economy?
  giveawaysHosted  Giveaway[]     @relation("giveawayHoster")
  enteredGiveaways Giveaway[]     @relation("giveawayEntrants")
  giveawaysWon     Giveaway[]     @relation("giveawayWinners")
  guildMembers     Member[]
  ticketsOwned     Ticket[]
  musicSettings    MusicSettings?
  lastUpdated      DateTime       @default(now()) @updatedAt
  TrainingData     TrainingData[]
  shouldTrain      Boolean        @default(true)
  ArgumentMode     ArgumentMode   @default(Normal)
  hashedIp         String?
  previousIps      String[]
  clan             Clan?          @relation(fields: [clanId], references: [id])
  clanId           String?
}

model Member {
  id                    String               @id @default(uuid())
  user                  User                 @relation(fields: [userId], references: [id])
  userId                String
  guild                 Guild                @relation(fields: [guildId], references: [id])
  guildId               String
  exp                   Int                  @default(0)
  level                 Int                  @default(0)
  messagesToday         Int                  @default(0)
  lastMessage           DateTime?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  ticketsParticipatedIn Ticket[]
  banned                Boolean              @default(false)
  ownedChannels         VoiceMasterChannel[]

  @@unique([userId, guildId])
}

model Discord {
  id           String   @id @default(uuid())
  token        String
  refreshToken String
  expiresAt    DateTime
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @unique
  createdAt    DateTime @default(now())
}

model Spotify {
  id           String    @id @default(uuid())
  token        String?
  refreshToken String?
  expiresAt    DateTime?
  user         User      @relation(fields: [userId], references: [id])
  userId       String    @unique
}

model Playlist {
  id      String  @id @default(uuid())
  name    String
  tracks  Track[]
  user    User?   @relation(fields: [userId], references: [id])
  guild   Guild?  @relation(fields: [guildId], references: [id])
  guildId String?
  userId  String?

  @@unique([name, guildId])
}

model Track {
  id        Int        @id @default(autoincrement())
  title     String
  uri       String     @unique
  playlists Playlist[]
}

model Command {
  id          String   @id @default(uuid())
  commandId   String
  commandInfo Json
  User        User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
  errors      Error[]
}

model Guild {
  id                   String                @id @unique @default(uuid())
  name                 String
  prefix               String                @default(";")
  icon                 String?
  banner               String?
  loggingChannel       String?
  autoRole             String?
  leveling             Boolean               @default(false)
  memberCount          Int                   @default(0)
  onlineCount          Int                   @default(0)
  admins               User[]
  members              Member[]
  playlists            Playlist[]
  tickets              Ticket[]
  giveaways            Giveaway[]
  TicketSettings       TicketSettings?
  WelcomeSettings      WelcomeSettings?
  stickyMessage        StickyMessage?
  VerificationSettings VerificationSettings?
  ModerationSettings   ModerationSettings?
  voiceMaster          VoiceMaster?
}

model Ticket {
  id           String   @id @default(uuid())
  channelId    String
  transcriptId String?
  reason       String?  @default("No reason specified")
  open         Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  Guild        Guild    @relation(fields: [guildId], references: [id])
  guildId      String
  ownedBy      User     @relation(fields: [ownerId], references: [id])
  ownerId      String
  members      Member[]
}

model TicketSettings {
  id         String   @id @default(uuid())
  categoryId String?
  roleId     String?
  messageId  String?
  channelId  String?
  embedTitle String?
  embedDesc  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  guild      Guild    @relation(fields: [guildId], references: [id])
  guildId    String   @unique
}

model VerificationSettings {
  id            String   @id @default(uuid())
  channelId     String?
  messageId     String?
  embedDesc     String?
  embedTitle    String?
  roleId        String?
  allowVpns     Boolean  @default(false)
  blockIfBanned Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  guild         Guild    @relation(fields: [guildId], references: [id])
  guildId       String   @unique
  enabled       Boolean  @default(false)
}

model WelcomeSettings {
  id         String   @id @default(uuid())
  channelId  String?
  message    String?
  embedDesc  String?
  embedTitle String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  guild      Guild    @relation(fields: [guildId], references: [id])
  guildId    String   @unique
}

model MusicSettings {
  id        String    @id @default(uuid())
  panelType PanelType @default(Embed)
  User      User      @relation(fields: [userId], references: [id])
  userId    String    @unique
}

model Error {
  id        String   @id @default(uuid())
  channelId String?
  guildId   String?
  message   String?
  command   Command? @relation(fields: [commandId], references: [id])
  fullJson  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  commandId String?
}

model TrainingData {
  id        String   @id @default(uuid())
  question  String
  response  String
  context   String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model StickyMessage {
  id        String   @id @default(uuid())
  channelId String
  messageId String?
  content   String
  guild     Guild    @relation(fields: [guildId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  guildId   String   @unique
}

model Economy {
  id        String   @id @default(uuid())
  balance   Int      @default(100)
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ModerationSettings {
  id               String   @id @default(uuid())
  notifySuspesion  Boolean  @default(false)
  AntiInvites      Boolean  @default(false)
  AntiSpam         Boolean  @default(true)
  AntiEmojiSpam    Boolean  @default(true)
  AntiMassMention  Boolean  @default(true)
  AntiMassSpoilers Boolean  @default(true)
  BypassRoles      String[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  guild            Guild    @relation(fields: [guildId], references: [id])
  guildId          String   @unique
}

model apiKey {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  requests  Int      @default(0)
}

model Clan {
  id    String @id @default(uuid())
  guild String @unique
  tag   String
  icon  String
  users User[]
}

model VoiceMaster {
  id            String               @id @default(uuid())
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  guild         Guild                @relation(fields: [guildId], references: [id])
  guildId       String               @unique
  textChannel   String?
  voiceChannel  String
  blacklistRole String?
  openChannels  VoiceMasterChannel[]
}

model VoiceMasterChannel {
  id            String      @id
  voiceMaster   VoiceMaster @relation(fields: [voiceMasterId], references: [id])
  voiceMasterId String
  owner         Member      @relation(fields: [ownerId], references: [id])
  ownerId       String
}

enum PanelType {
  Embed
  Image
}

enum UserTier {
  Normal
  Premium
  Beta
  Staff
}

enum ArgumentMode {
  Normal
  Advanced
}
